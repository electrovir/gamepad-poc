{"version":3,"file":"index.c5d3fbe0.js","sources":["../../../vite/modulepreload-polyfill","../src/chrome-gamepad.ts","../src/gamepad-api.ts","../src/query.ts","../src/gamepad-view.ts","../src/gamepad-update.ts","../src/index.ts"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","export type GamepadEffectParameters = {\n    duration: number;\n    strongMagnitude: number;\n    weakMagnitude: number;\n    startDelay: number;\n};\nexport enum GamepadHapticActuatorType {\n    dualRumble = 'dual-rumble',\n}\ntype PlayEffectResult = 'complete';\n\nexport interface GamepadHapticActuator {\n    readonly type: GamepadHapticActuatorType;\n    playEffect(\n        type: GamepadHapticActuatorType,\n        options: Partial<GamepadEffectParameters>,\n    ): Promise<PlayEffectResult>;\n}\n\n// for haptic API differences\nexport interface ChromeGamepad extends Omit<Gamepad, 'hapticActuators'> {\n    vibrationActuator: GamepadHapticActuator;\n}\n\nexport interface GamepadList extends Iterable<Gamepad> {\n    0: Gamepad | null;\n    1: Gamepad | null;\n    2: Gamepad | null;\n    3: Gamepad | null;\n    length: 4;\n}\n\nexport interface ChromeNavigator extends Omit<Navigator, 'getGamepads'> {\n    getGamepads(): GamepadList;\n}\n\nexport interface OldChromeNavigator extends Omit<Navigator, 'getGamepads'> {\n    webkitGetGamepads(): GamepadList;\n}\n","import {ChromeGamepad, GamepadHapticActuatorType} from './chrome-gamepad';\n\nexport function activateRumble(gamepad: Gamepad | ChromeGamepad) {\n    const rumble = {duration: 500, intensity: 1};\n\n    if ('hapticActuators' in gamepad) {\n        gamepad.hapticActuators.forEach((actuator) => {\n            actuator.pulse(rumble.intensity, rumble.duration);\n        });\n    } else if ('vibrationActuator' in gamepad) {\n        gamepad.vibrationActuator.playEffect(GamepadHapticActuatorType.dualRumble, {\n            duration: rumble.duration,\n            weakMagnitude: rumble.intensity,\n            strongMagnitude: rumble.intensity,\n        });\n    }\n}\n\nexport function readButtonValue(\n    button:\n        | GamepadButton\n        // in some browsers the button is actually just the raw value number\n        | number,\n): {pressed: boolean; value: number} {\n    if (typeof button === 'number') {\n        return {\n            pressed: button > 0,\n            value: button,\n        };\n    } else {\n        return {\n            pressed: button.pressed || button.touched,\n            value: button.value,\n        };\n    }\n}\n","export function queryDocument(query: string): HTMLElement {\n    const queryResult = document.querySelector(query);\n    if (!(queryResult instanceof HTMLElement)) {\n        throw new Error(`No match for query \"${query}\"`);\n    }\n\n    return queryResult;\n}\n\nexport function queryDocumentAll(query: string): HTMLElement[] {\n    const queryResults = document.querySelectorAll(query);\n    const filteredQueries = Array.from(queryResults).filter(\n        (queryResult): queryResult is HTMLElement => queryResult instanceof HTMLElement,\n    );\n    const diff = queryResults.length - filteredQueries.length;\n    if (diff) {\n        throw new Error(`${diff} query matches were invalid \"${query}\"`);\n    }\n\n    return filteredQueries;\n}\n","import {ChromeGamepad} from './chrome-gamepad';\nimport {activateRumble, readButtonValue} from './gamepad-api';\nimport {queryDocument, queryDocumentAll} from './query';\n\nfunction getGamepadDisplayValue(rawValue: any): string {\n    if (Array.isArray(rawValue)) {\n        return `Array(${rawValue.length})`;\n    } else if (rawValue && typeof rawValue === 'object') {\n        return `${rawValue.constructor.name}`;\n    } else if (typeof rawValue === 'string') {\n        return `\"${rawValue}\"`;\n    } else {\n        return rawValue;\n    }\n}\n\nfunction getGamepadInfo(gamepad: Gamepad): string {\n    return (Object.keys(gamepad.constructor.prototype) as (keyof Gamepad)[])\n        .map((gamepadKey) => {\n            return `<tr><th>${gamepadKey}:</th><td>${getGamepadDisplayValue(\n                gamepad[gamepadKey],\n            )}</td></tr>`;\n        })\n        .join('');\n}\n\nfunction hasRumble(gamepad: Gamepad | ChromeGamepad): boolean {\n    return (\n        ('hapticActuators' in gamepad && !!gamepad.hapticActuators.length) ||\n        ('vibrationActuator' in gamepad && !!gamepad.vibrationActuator)\n    );\n}\n\nexport function removeGamepadView(gamepad: Gamepad) {\n    const controllerDiv = document.getElementById('controller' + gamepad.index);\n    controllerDiv && document.body.removeChild(controllerDiv);\n\n    if (!queryDocumentAll('.controller').length) {\n        const start = document.getElementById('start');\n        if (start) {\n            start.style.display = '';\n        }\n    }\n}\n\nexport function createGamepadView(gamepad: Gamepad) {\n    const controllerDiv = document.createElement('div');\n    controllerDiv.setAttribute('id', 'controller' + gamepad.index);\n    controllerDiv.classList.add('controller');\n\n    const controllerTitle = document.createElement('table');\n    controllerTitle.innerHTML = getGamepadInfo(gamepad);\n    controllerDiv.appendChild(controllerTitle);\n\n    const rumbleButton = document.createElement('button');\n    if (!hasRumble(gamepad)) {\n        rumbleButton.disabled = true;\n        rumbleButton.title = 'Not supported by this browser and/or controller.';\n    }\n    rumbleButton.classList.add('rumble-button');\n    rumbleButton.onclick = () => activateRumble(gamepad);\n    rumbleButton.innerText = 'Rumble';\n    controllerDiv.appendChild(rumbleButton);\n\n    const allButtonsDiv = document.createElement('div');\n    allButtonsDiv.className = 'buttons';\n    gamepad.buttons.forEach((button, index) => {\n        const buttonDiv = document.createElement('div');\n        buttonDiv.className = 'button';\n\n        const backgroundSpan = document.createElement('span');\n        backgroundSpan.classList.add('button-background');\n        buttonDiv.appendChild(backgroundSpan);\n\n        const buttonTextSpan = document.createElement('span');\n        buttonTextSpan.classList.add('button-text');\n        buttonTextSpan.innerHTML = String(index);\n        buttonDiv.appendChild(buttonTextSpan);\n\n        allButtonsDiv.appendChild(buttonDiv);\n    });\n\n    controllerDiv.appendChild(allButtonsDiv);\n\n    const allAxesDiv = document.createElement('div');\n    allAxesDiv.className = 'axes';\n\n    gamepad.axes.forEach((axis, index) => {\n        const axisSlider = document.createElement('progress');\n        axisSlider.className = 'axis';\n        //p.id = \"a\" + i;\n        axisSlider.setAttribute('max', '2');\n        // default to the middle\n        axisSlider.setAttribute('value', '1');\n        axisSlider.innerHTML = String(index);\n        allAxesDiv.appendChild(axisSlider);\n    });\n\n    controllerDiv.appendChild(allAxesDiv);\n\n    const start = queryDocument('#start');\n    start.style.display = 'none';\n\n    document.body.appendChild(controllerDiv);\n}\n\nexport function notSupportedView() {\n    const start = queryDocument('#start');\n    start.style.display = 'none';\n\n    const notSupportedHeader = document.createElement('h1');\n    notSupportedHeader.innerHTML = 'Your browser does not support gamepads.';\n    notSupportedHeader.classList.add('error');\n    document.body.appendChild(notSupportedHeader);\n}\n\nexport function updateView(gamepad: Gamepad) {\n    const controllerId = `#controller${gamepad.index}`;\n\n    gamepad.buttons.forEach((button, buttonIndex) => {\n        const buttonSelector = `${controllerId} .button:nth-child(${buttonIndex + 1})`;\n\n        const buttonDiv = queryDocument(buttonSelector);\n        const buttonBackgroundSpan = queryDocument(`${buttonSelector} .button-background`);\n        const {value, pressed} = readButtonValue(button);\n\n        const pct = `${Math.round(value * 100)}%`;\n        buttonBackgroundSpan.style.width = pct;\n        buttonBackgroundSpan.style.height = pct;\n\n        if (pressed) {\n            buttonDiv.className = 'button pressed';\n        } else {\n            buttonDiv.className = 'button';\n        }\n    });\n\n    gamepad.axes.forEach((axis, axisIndex) => {\n        const axisSlider = queryDocument(`${controllerId} .axis:nth-child(${axisIndex + 1})`);\n        const newHtml = `${axisIndex}:: ${axis.toFixed(4)}`;\n        const oldHtml = axisSlider.innerHTML;\n        if (newHtml !== oldHtml) {\n            axisSlider.innerHTML = newHtml;\n        }\n        const newValue = String(axis + 1);\n        const oldValue = axisSlider.getAttribute('value');\n        if (oldValue !== newValue) {\n            axisSlider.setAttribute('value', String(axis + 1));\n        }\n    });\n}\n","import {ChromeNavigator, OldChromeNavigator} from './chrome-gamepad';\nimport {createGamepadView, notSupportedView, removeGamepadView, updateView} from './gamepad-view';\n\nconst globalGamepads: Record<number, Gamepad> = {};\n\nexport function controllerConnected(gamepadEvent: GamepadEvent) {\n    initGamepad(gamepadEvent.gamepad);\n}\n\nfunction initGamepad(gamepad: Gamepad) {\n    console.info(`adding gamepad ${gamepad.index}`, gamepad);\n    globalGamepads[gamepad.index] = gamepad;\n\n    createGamepadView(gamepad);\n}\n\nfunction updateGamepad(gamepad: Gamepad) {\n    // only need to update if the references are different\n    if (globalGamepads[gamepad.index] !== gamepad) {\n        // this line will be called in Chrome whenever a gamepad is updated but never in Safari\n        globalGamepads[gamepad.index] = gamepad;\n    }\n}\n\nexport function controllerDisconnected(gamepadEvent: GamepadEvent) {\n    removeGamepad(gamepadEvent.gamepad);\n}\n\nfunction removeGamepad(gamepad: Gamepad) {\n    delete globalGamepads[gamepad.index];\n    removeGamepadView(gamepad);\n}\n\nexport function startUpdating() {\n    const internalNavigator = getNavigator();\n    if ('webkitGamepads' in internalNavigator || 'getGamepads' in internalNavigator) {\n        updateStatus();\n    } else {\n        notSupportedView();\n    }\n}\n\nfunction updateStatus() {\n    updateGamepadObjects();\n\n    Object.values(globalGamepads).forEach((gamepad) => {\n        updateView(gamepad);\n    });\n\n    requestAnimationFrame(updateStatus);\n}\n\n/** Different navigator types to support different browsers */\nfunction getNavigator(): OldChromeNavigator | ChromeNavigator | Navigator {\n    return navigator;\n}\n\nfunction getGamepads(): Gamepad[] {\n    const internalNavigator = getNavigator();\n\n    const gamepads = Array.from(\n        'webkitGetGamepads' in internalNavigator\n            ? internalNavigator.webkitGetGamepads()\n            : internalNavigator.getGamepads(),\n    );\n\n    return gamepads.filter((gamepad): gamepad is Gamepad => !!gamepad);\n}\n\n/**\n * Some browsers (Chrome) do not add updated data inside the same gamepad instance that we initially\n * get in the connection events. (Essentially the gamepad instances are immutable so they construct\n * new ones for every update.) Safari, on the other hand, will keep the same object references (it\n * never needs to update globalGamepads) but it won't update those references until\n * navigator.getGamepads is called.\n */\nfunction updateGamepadObjects() {\n    const currentGamepads: Gamepad[] = getGamepads();\n    currentGamepads.forEach((gamepad) => {\n        if (gamepad) {\n            if (gamepad.index in globalGamepads) {\n                updateGamepad(gamepad);\n            } else {\n                initGamepad(gamepad);\n            }\n        }\n    });\n}\n","import Bowser from 'bowser';\nimport {controllerConnected, controllerDisconnected, startUpdating} from './gamepad-update';\nimport {queryDocument} from './query';\n\nconst browser = Bowser.getParser(navigator.userAgent).getBrowser();\nqueryDocument('#browser-version').innerText = `${browser.name} ${browser.version}`;\n\nwindow.addEventListener('gamepadconnected', controllerConnected);\nwindow.addEventListener('gamepaddisconnected', controllerDisconnected);\n\nstartUpdating();\n"],"names":[],"mappings":"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"}